#!/bin/bash

# Copyright Â© 2015-2018 Dmytro Katyukha <dmytro.katyukha@gmail.com>

#######################################################################
# This Source Code Form is subject to the terms of the Mozilla Public #
# License, v. 2.0. If a copy of the MPL was not distributed with this #
# file, You can obtain one at http://mozilla.org/MPL/2.0/.            #
#######################################################################


# Odoo install helper script

SCRIPT=$0;
SCRIPT_NAME=$(basename "$SCRIPT");
F=$(readlink -f "$SCRIPT");  # full script path;
WORKDIR=$(pwd);


# load basic conf
if [ -f "/etc/odoo-helper.conf" ]; then
    source "/etc/odoo-helper.conf";
fi
if [ -f "$HOME/odoo-helper.conf" ]; then
    source "$HOME/odoo-helper.conf";
fi
# -----------

set -e;  # Fail on errors


if [ -z "$ODOO_HELPER_LIB" ]; then
    echo "Odoo-helper-scripts seems not been installed correctly.";
    echo "Reinstall it (see Readme on https://gitlab.com/katyukha/odoo-helper-scripts/)";
    exit 1;
fi

# Load common functions
source "$ODOO_HELPER_LIB/common.bash"; 

# Require libs
ohelper_require 'install'
# ----------------------------------------------------------------------------------------


declare -A CONF_OPTIONS;
declare -A TEST_CONF_OPTIONS;

function print_usage {
    echo "
    Bash script to instal dev version of Odoo in local environment

    Script version: $ODOO_HELPER_VERSION

    Note:
        Before running this script, system dependencies and pre-requirements
        have to be installed.
        To do this run following commands(*sudo* required):
            $ odoo-helper install pre-requirements
            $ odoo-helper install sys-deps <odoo-version>

    Usage:
         bash $SCRIPT_NAME [options]

    Environment variables used:
         ODOO_BRANCH         - allow to clone specified branch. Current val is $ODOO_BRANCH
         ODOO_DOWNLOAD_ARCHIVE - (on|off) if on then only archive will be downloaded
                                 not clonned. Current value is '$DOWNLOAD_ARCHIVE'
         ODOO_DBHOST         - allow to specify Postgresql's server host.
                               Current value: $DB_HOST
         ODOO_DBUSER         - allow to specify user to connect to DB as.
                               Current value: $DB_USER
         ODOO_DBPASSWORD     - allow to specify db password to connect to DB as.
                               Current value: $DB_PASSWORD

    Available options:
         -i|--install-dir <dir>        - directory to install odoo in. default: $PROJECT_ROOT_DIR
         --odoo-repo <git repo>        - git repository to get Odoo from. default: $ODOO_REPO
                                         Used only if *download-archive* set to *off*
         --ocb                         - Use [OCB (Odoo Community Backports)](https://github.com/OCA/OCB) fork
         --ou|--openupgrade            - [Deprecated] Use [OpenUpgrade](https://github.com/OCA/OpenUpgrade) fork
         --odoo-version <odoo version> - odoo version to install. default: $ODOO_VERSION
         -b|--odoo-branch <branch>     - specify odoo branch to install. default: $ODOO_BRANCH
                                         Normaly it is same as odoo version, but if You want to install odoo
                                         from diferent branch, use this option.
         --dev                         - [sudo] This option enables automatic installation of developer tools,
                                         like, pylint, flake8, unbuffer, etc.
                                         May require sudo.
         --download-archive on|off     - if on, then odoo will be downloaded as archive. it is faster
                                         if You want to clone Odoo repository set this option to 'off'
                                         Default: $DOWNLOAD_ARCHIVE
         --git                         - Same as '--download-archive off'
         --archive                     - Same as '--download-archive on'
         --single-branch on|off        - if on, then odoo will clone only single branch,
                                         which will speed-up install process.
                                         This option is used only if --download-archive is 'off'
                                         Default: $CLONE_SINGLE_BRANCH
         --build-python <ver>          - build custom python for specified version
                                         'auto' could be specified to automatically guess correct version.
         --build-python-if-needed      - Automatically detect if it is necessary to build custom python.
         --build-python-optimize       - Apply '--enable-optimizations' for python build.
                                         This could take a while.
         --build-python-sqlite3        - Apply  --enable-loadable-sqlite-extensions
                                         when building python.
         --node-version <ver>          - Version of node.js to be installed. By default lts.
         --no-single-branch            - Set '--signle-branch' option to 'off'
         --db-host <host>              - database host to be used in settings. default: $DB_HOST
         --db-user <user>              - database user to be used in settings. default: $DB_USER
         --db-pass <password>          - database password to be used in settings. default: odoo
         --create-db-user              - [sudo] if set, odoo-helper will try to create
                                         postgresql user after the installation of odoo.
         --http-port <port>            - automatically set configuration for http port for this instance
         --http-host <host>            - automatically set configuration for http host for this instance
         --conf-opt-<option_name>      - rewrite configuration option. Ex: '--conf-opt-xmlrpc_port 9999'
         --test-conf-opt-<option_name> - rewrite test configuration option Ex: '--conf-opt-xmlrpc_port 9998'
         --enable-unbuffer             - use this optiona to enable usage of unbuffer for this installation.
                                         this option will use unbuffer to make output of tests colored,
                                         thus more readable.
         --sys-deps                    - [sudo] Install system dependencies automatically.
         --ikwid                       - [I Know What I Do], set this option to disable all safeguards.
                                         For example, you can use this opt to run odoo installation as root.
         --verbose|--vv                - show extra output
         --help|-h|help                - show this help message

    After instalation configs will be generated in 'conf' directory
    Also 'log' directory will contain Odoo logs

    Note that, it is safe enough to run this script second time with same or similar args
    if it breaks somehow. It will automaticaly detect if odoo sources were downloaded or
    virtual environment created and will not do this operations second time.

    For bug reports use gitlab issues: https://gitlab.com/katyukha/odoo-helper-scripts/issues
    ";
}

function parse_options {
    if [[ $# -lt 1 ]]; then
        echoe -e "${REDC}ERROR${NC}: No options supplied!";
        print_usage;
        exit 0;
    fi

    # Set this as variable, because it's processing requires
    # that all other options already handled
    local build_python_if_needed;
    local is_openupgrade_install;

    # Parse options
    while [[ $# -gt 0 ]]
    do
        local key="$1";
        case $key in
            --install-dir|-i)
                PROJECT_ROOT_DIR=$(readlink -f "$2");
                shift;
            ;;
            --odoo-repo)
                ODOO_REPO=$2;
                shift;
            ;;
            --ocb)
                ODOO_REPO="https://github.com/OCA/OCB";
            ;;
            --ou|--openupgrade)
                is_openupgrade_install=1;
                ODOO_REPO="https://github.com/OCA/OpenUpgrade";
            ;;
            --odoo-version)
                ODOO_VERSION=$2;
                shift;
            ;;
            --odoo-branch|--branch|-b)
                ODOO_BRANCH=$2;
                shift;
            ;;
            --dev)
                USE_UNBUFFER=1;
                ODOO_INSTALL_DEV_TOOLS=1;
            ;;
            --download-archive)
                DOWNLOAD_ARCHIVE=$2;
                shift;
            ;;
            --git)
                DOWNLOAD_ARCHIVE='off';
            ;;
            --archive)
                DOWNLOAD_ARCHIVE='on';
            ;;
            --single-branch)
                CLONE_SINGLE_BRANCH=$2;
                shift;
            ;;
            --no-single-branch)
                CLONE_SINGLE_BRANCH='off';
            ;;
            --build-python)
                ODOO_BUILD_PYTHON_VERSION=$2;
                shift;
            ;;
            --build-python-if-needed)
                build_python_if_needed=1;
            ;;
            --build-python-optimize)
                ODOO_BUILD_PYTHON_OPTIMIZE=1;
            ;;
            --build-python-sqlite3)
                ODOO_BUILD_PYTHON_SQLITE3=1;
            ;;
            --node-version)
                ODOO_INSTALL_NODE_VERSION=$2;
                shift;
            ;;
            --db-host)
                DB_HOST=$2;
                shift;
            ;;
            --db-user)
                DB_USER=$2;
                shift;
            ;;
            --db-pass)
                DB_PASSWORD=$2;
                shift;
            ;;
            --create-db-user)
                DB_ENFORCE_CREATE_PG_USER=1;
            ;;
            --http-port)
                ODOO_HTTP_PORT=$2;
                shift;
            ;;
            --http-host)
                ODOO_HTTP_HOST=$2;
                shift;
            ;;
            --conf-opt-*)
                local opt_name="${key#--conf-opt-}"
                CONF_OPTIONS[$opt_name]=$2;
                shift;
            ;;
            --test-conf-opt-*)
                local opt_name="${key#--test-conf-opt-}"
                TEST_CONF_OPTIONS[$opt_name]=$2;
                shift;
            ;;
            --enable-unbuffer)
                USE_UNBUFFER=1;
            ;;
            --sys-deps)
                ODOO_INSTALL_SYS_DEPS_AUTO=1;
            ;;
            --ikwid)
                ODOO_HELPER_IKWID=1;
            ;;
            --verbose|-vv)
                VERBOSE=1;
            ;;
            -h|--help|help)
                # Check environment for config
                install_preconfigure_env;

                print_usage;
                exit 0;
            ;;
            *)
                echo "Unknown option global option /command $key";
                exit 1;
            ;;
        esac
        shift
    done

    if [ -n "$build_python_if_needed" ] && ! odoo_ensure_python_version; then
        # TODO: Possibly this have to be done on install_odoo func.
        #       Especially, in case when we decide to automatically install
        #       system dependencies during odoo installation.
        echoe -e "${BLUEC}Enabling automatic build of python...${NC}";
        ODOO_BUILD_PYTHON_VERSION=auto;
    fi

    if [ -n "$is_openupgrade_install" ] && [ "$(odoo_get_major_version)" -gt 13 ]; then
        echoe -e "${REDC}ERROR${NC}:${BLUEC}This option is not allowed of Odoo 14.0 and above, because starting from Odoo 14 openupgrade repo contains only migration scripts...${NC}";
        exit 2;
    fi

}

function install_odoo {
    local save_dir;
    save_dir=$(pwd);
    cd "$PROJECT_ROOT_DIR";

    # if not installed odoo, install it
    if [ ! -d "$ODOO_PATH" ]; then
        if [ "$DOWNLOAD_ARCHIVE" == "on" ]; then
            echoe -e "${BLUEC}Downloading odoo...${NC}";
            install_fetch_odoo download;
        else
            echoe -e "${BLUEC}Clonning odoo...${NC}";
            install_fetch_odoo clone;
        fi
    fi

    # Install odoo
    install_odoo_install;

    # restore curenct working dir
    cd "$save_dir";
}

function generate_conf {
    # Generate configuration
    local -A ODOO_CONF_OPTIONS;

    for key in "${!CONF_OPTIONS[@]}"; do
        ODOO_CONF_OPTIONS[$key]=${CONF_OPTIONS[$key]};
    done

    # Add default values
    ODOO_CONF_OPTIONS[db_host]="${ODOO_CONF_OPTIONS['db_host']:-$DB_HOST}";
    ODOO_CONF_OPTIONS[db_port]="${ODOO_CONF_OPTIONS['db_port']:-False}";
    ODOO_CONF_OPTIONS[db_user]="${ODOO_CONF_OPTIONS['db_user']:-$DB_USER}";
    ODOO_CONF_OPTIONS[db_password]="${ODOO_CONF_OPTIONS['db_password']:-$DB_PASSWORD}";

    if [ -n "$ODOO_HTTP_PORT" ]; then
        ODOO_CONF_OPTIONS[http_port]="${ODOO_CONF_OPTIONS['http_port']:-$ODOO_HTTP_PORT}";
        ODOO_CONF_OPTIONS[xmlrpc_port]="${ODOO_CONF_OPTIONS['xmlrpc_port']:-$ODOO_HTTP_PORT}";
    fi

    if [ -n "$ODOO_HTTP_HOST" ]; then
        ODOO_CONF_OPTIONS[http_interface]="${ODOO_CONF_OPTIONS['http_host']:-$ODOO_HTTP_HOST}";
        ODOO_CONF_OPTIONS[xmlrpc_interface]="${ODOO_CONF_OPTIONS['xmlrpc_host']:-$ODOO_HTTP_HOST}";
    fi

    # Generate conf
    install_generate_odoo_conf "$ODOO_CONF_FILE";  # imported from 'install' module
}

function generate_test_conf {
    # Generate test configuration configuration
    local -A ODOO_CONF_OPTIONS;

    for key in "${!TEST_CONF_OPTIONS[@]}"; do
        ODOO_CONF_OPTIONS[$key]=${TEST_CONF_OPTIONS[$key]};
    done

    # Add default values
    ODOO_CONF_OPTIONS[logfile]="${ODOO_CONF_OPTIONS['logfile']:-False}";
    ODOO_CONF_OPTIONS[db_host]="${ODOO_CONF_OPTIONS['db_host']:-$DB_HOST}";
    ODOO_CONF_OPTIONS[db_port]="${ODOO_CONF_OPTIONS['db_port']:-False}";
    ODOO_CONF_OPTIONS[db_user]="${ODOO_CONF_OPTIONS['db_user']:-$DB_USER}";
    ODOO_CONF_OPTIONS[db_password]="${ODOO_CONF_OPTIONS['db_password']:-$DB_PASSWORD}";
    ODOO_CONF_OPTIONS[xmlrpc_port]="${ODOO_CONF_OPTIONS['xmlrpc_port']:-8269}";
    ODOO_CONF_OPTIONS[xmlrpcs_port]="${ODOO_CONF_OPTIONS['xmlrpcs_port']:-8271}";
    ODOO_CONF_OPTIONS[http_port]="${ODOO_CONF_OPTIONS['http_port']:-8269}";
    ODOO_CONF_OPTIONS[longpolling_port]="${ODOO_CONF_OPTIONS['longpolling_port']:-8272}";

    # Generate conf
    install_generate_odoo_conf "$ODOO_TEST_CONF_FILE";   # imported from 'install' module
}

#------------------------------------------------------------------------
# Install Odoo
#------------------------------------------------------------------------

# Install process
parse_options "$@";

# Show warning if the system is running under the root and exit
if [ "$UID" -eq 0 ] && [ -z "$CI_RUN" ]; then
    echo -e "${YELLOWC}WARNING${NC}: This script is not intended for installation of production-ready odoo servers." \
        "If you want to install production-ready odoo, that you have to use" \
        "[${BLUEC}CR&D Deploy${NC}](${LBLUEC}https://github.com/crnd-inc/crnd-deploy${NC}) script," \
        "that will do it in right way (create separate user for Odoo, install postgres and nginx if requested, etc).";
    if [ -z "$ODOO_HELPER_IKWID" ]; then
        echo -e "If You Know What You Do, then use option ${BLUEC}--ikwid${NC} (that means ${LBLUEC}I Know What I Do${NC}) for this script.";
        exit 3;
    fi
fi

# Check environment to get values not provided via command line args
install_preconfigure_env;

# Directory and file paths
PROJECT_ROOT_DIR=${PROJECT_ROOT_DIR:-$WORKDIR/odoo-$ODOO_BRANCH};
PROJECT_CONFIG_VERSION=$ODOO_HELPER_CONFIG_VERSION;
config_set_defaults;  # imported from common module

install_create_project_dir_tree;  # imported from 'install' module

if [ -n "$ODOO_INSTALL_SYS_DEPS_AUTO" ] && [ "$ODOO_INSTALL_SYS_DEPS_AUTO" -eq 1 ]; then
    echo -e "${BLUEC}Installing system dependencies for Odoo ${YELLOWC}${ODOO_VERSION}${BLUEC}...${NC}";
    install_sys_deps_for_odoo_version "${ODOO_VERSION}";
fi

# install odoo
install_odoo; 

# Generate and save odoo-helper project conf
echo -e "${BLUEC}Generating configurations...${NC}";
config_print > "$PROJECT_ROOT_DIR/$CONF_FILE_NAME";
generate_conf;
generate_test_conf;

# Create pg user if needed
if [ -n "${DB_ENFORCE_CREATE_PG_USER}" ] && [ "${DB_ENFORCE_CREATE_PG_USER}" -eq 1 ]; then
    echo -e "${BLUEC}Creating postgresql user ${YELLOWC}${DB_USER}${BLUEC}...${NC}";
    postgres_user_create "${DB_USER}" "${DB_PASSWORD}";
fi

# Install dev-tools if needed
if [ -n "${ODOO_INSTALL_DEV_TOOLS}" ]; then
    echo -e "${BLUEC}Installing development tools ...${NC}";
    install_dev_tools;
fi
#------------------------------------------------------------------------

echo -e "${GREENC}Odoo has been successfully installed!${NC}";
echo -e "";
echo -e "Installation path:"
echo -e "    ${BLUEC}${PROJECT_ROOT_DIR}${NC}";
echo -e "Odoo configuration path:"
echo -e "    ${BLUEC}${ODOO_CONF_FILE}${NC}";
echo -e "odoo-helper-scripts instance configuration path:";
echo -e "    ${BLUEC}${PROJECT_ROOT_DIR}/${CONF_FILE_NAME}${NC}";
echo -e "";
echo -e "Use ${YELLOWC}odoo-helper${NC} command to manage this Odoo instance.";
echo -e "First change current working directory to somewhere inside ";
echo -e "Odoo installation path:";
echo -e "    ${BLUEC}cd ${PROJECT_ROOT_DIR}${NC}";
echo -e "Start odoo server with:";
echo -e "    ${BLUEC}odoo-helper server start${NC}";
echo -e "Or check server status with:";
echo -e "    ${BLUEC}odoo-helper server status${NC}";
echo -e "";
echo -e "For more info look at documentation:";
echo -e "    ${LBLUEC}https://katyukha.gitlab.io/odoo-helper-scripts/${NC}";
echo -e "Or quick start guide:";
echo -e "    ${LBLUEC}https://katyukha.gitlab.io/odoo-helper-scripts/quick-start-guide/#manage-installed-odoo${NC}";
